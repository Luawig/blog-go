definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handler.loginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Article:
    properties:
      categories:
        items:
          $ref: '#/definitions/model.Category'
        type: array
      comment_count:
        type: integer
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      read_count:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      updatedAt:
        type: string
    type: object
  model.Category:
    properties:
      articles:
        items:
          $ref: '#/definitions/model.Article'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.Comment:
    properties:
      article:
        $ref: '#/definitions/model.Article'
      article_id:
        type: integer
      content:
        type: string
      created_at:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updated_at:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.User:
    properties:
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      created_at:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      password:
        maxLength: 32
        minLength: 4
        type: string
      updatedAt:
        type: string
      username:
        maxLength: 12
        minLength: 4
        type: string
    required:
    - email
    - password
    - username
    type: object
  utils.Response:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/article:
    post:
      consumes:
      - application/json
      parameters:
      - description: Article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/model.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create an article
      tags:
      - article
  /api/article/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete an article
      tags:
      - article
    get:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Retrieve an article
      tags:
      - article
    put:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article Update
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/model.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update an article
      tags:
      - article
  /api/articles:
    get:
      consumes:
      - application/json
      parameters:
      - default: 10
        description: Page Size
        in: query
        name: page_size
        type: integer
      - default: 1
        description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Retrieve list of articles
      tags:
      - article
  /api/articles/{title}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Article Title
        in: path
        name: title
        required: true
        type: string
      - default: 10
        description: Page Size
        in: query
        name: page_size
        type: integer
      - default: 1
        description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      summary: Retrieve articles by title
      tags:
      - article
  /api/articles/category/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - default: 10
        description: Page Size
        in: query
        name: page_size
        type: integer
      - default: 1
        description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Retrieve articles by category
      tags:
      - article
  /api/categories:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List categories
      tags:
      - category
  /api/category:
    post:
      consumes:
      - application/json
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a category
      tags:
      - category
  /api/category/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete a category
      tags:
      - category
    get:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get a category
      tags:
      - category
    put:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update a category
      tags:
      - category
  /api/comment:
    post:
      consumes:
      - application/json
      parameters:
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a comment
      tags:
      - comment
  /api/comment/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Permission Denied
      summary: Delete a comment
      tags:
      - comment
    get:
      consumes:
      - application/json
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get a comment
      tags:
      - comment
    put:
      consumes:
      - application/json
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Permission Denied
      summary: Update a comment
      tags:
      - comment
  /api/comments:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List comments
      tags:
      - comment
  /api/comments/article/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List comments by article
      tags:
      - comment
  /api/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Information
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handler.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Login a user
      tags:
      - auth
  /api/user:
    post:
      consumes:
      - application/json
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a user
      tags:
      - user
  /api/user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get a user
      tags:
      - user
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update a user
      tags:
      - user
  /api/user/{id}/password:
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update a user's password
      tags:
      - user
  /api/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List users
      tags:
      - user
  /api/users/{username}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: Page Size
        in: query
        name: page_size
        type: integer
      - description: Page Number
        in: query
        name: page_num
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      summary: List users by username
      tags:
      - user
swagger: "2.0"
